[{"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\index.js":"1","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\reportWebVitals.js":"2","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\App.js":"3","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\main.js":"4","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\reducer.js":"5","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\rootSaga.js":"6","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\cart\\cart.js":"7","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\cart\\show-cart.js":"8","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\home\\index.js":"9","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\sagas.js":"10","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\actions.js":"11"},{"size":982,"mtime":1620317620129,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1233,"mtime":1620329866975,"results":"15","hashOfConfig":"13"},{"size":809,"mtime":1620257269706,"results":"16","hashOfConfig":"13"},{"size":1703,"mtime":1635793930211,"results":"17","hashOfConfig":"13"},{"size":326,"mtime":1619892541153,"results":"18","hashOfConfig":"13"},{"size":4960,"mtime":1635794250916,"results":"19","hashOfConfig":"13"},{"size":4745,"mtime":1635794241840,"results":"20","hashOfConfig":"13"},{"size":4487,"mtime":1635794556600,"results":"21","hashOfConfig":"13"},{"size":1969,"mtime":1635792562581,"results":"22","hashOfConfig":"13"},{"size":1311,"mtime":1635793955253,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"jwf271",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\index.js",[],["52","53"],"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\reportWebVitals.js",[],"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\App.js",[],"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\main.js",[],"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\reducer.js",["54","55"],"import produce from 'immer'; // produce immer é um tipo de produtor de valores que mantém estado (state) junto ao redux\r\n\r\n/*\r\n** funções reducer e reducerAmountCart responsável pelo comportamento das ações dispatch em react-redux\r\n** conforme o tipo (type ou action.type) lançado durante o uso da aplicação react.js.\r\n** o state para o estado da loja (store) e action das ações (dispatch) da aplicação\r\n**/\r\n\r\nconst INITIAL_AMOUNT = {\r\n  amount: [],\r\n}\r\n\r\nconst INITIAL_CART = {\r\n  cart: []\r\n}\r\n\r\n// responsável por adicionar Produto ao carrinho através dos dispatchs\r\nconst reducer = produce((draft, action) => {\r\n  switch (action.type) {\r\n    case '@cart/addSuccess':\r\n      const {product} = action;\r\n      draft.cart[product[0].id] = product;\r\n      return draft;\r\n  }\r\n}, INITIAL_CART)\r\n\r\n// responsável por atualizar a quantia de cada Produto individualmente\r\nconst reducerAmountCart = produce((draft, action) => {\r\n  switch (action.type) {\r\n    // case responsável por adicionar quantia de Produtos ao adicionar ao carrinho\r\n    case '@cart/amountSuccess':\r\n      if(typeof draft.amount[action.id] === 'undefined')\r\n        draft.amount[action.id] = 1;\r\n      else\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de Produtos somando (incremented)\r\n    case '@cart/incremented':\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de Produtos subtraindo (decremented)\r\n    case '@cart/decremented':\r\n      if(draft.amount[action.id] > 0)\r\n        draft.amount[action.id]--;\r\n  }\r\n}, INITIAL_AMOUNT)\r\n\r\n// exporta os reducers individualmente\r\nexport {reducer, reducerAmountCart};","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\rootSaga.js",[],"C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\cart\\cart.js",["56","57","58","59"],"import { FaHome } from 'react-icons/fa';\r\nimport { FcPlus} from 'react-icons/fc';\r\nimport { FcMinus } from 'react-icons/fc';\r\nimport './index.css'; // importa css de App.css\r\nimport React, {Component} from 'react'; // importe de React\r\nimport {bindActionCreators} from 'redux'; // importar de redux\r\nimport { useSelector, useDispatch, connect } from 'react-redux'; // importar de react-redux\r\nimport { increment, decrement, add } from '../../store/actions'; // importar de store/actions\r\n\r\nimport {  // importa Link de react-router-dom para gerar os links de JSX\r\n  Link\r\n} from \"react-router-dom\";\r\nimport showCart from './show-cart';\r\n\r\n// declare Cart como componente de classe que herda (estende) de Component \r\nclass Cart extends Component {\r\n  state = {\r\n    addSuccess: 'block'\r\n  }\r\n\r\n  render() {\r\n    let total = 0;\r\n    const {\r\n      id, // id para representar a notificação de adição de item ao carrinho com sucesso\r\n      cart, // text para a interpolação dos valores da lista (objeto literal)\r\n      amount, // amount para representar a quantia de cada livro no carrinho individualmente\r\n      increment,  // representa o incremento (soma) da quantia de livros\r\n      decrement,  // representa o decremento (subtração) da quantia de livros\r\n    } = this.props; // obtém de this.props os objetos (id, add, cart, amount, increment, decrement)\r\n\r\n    // responsável em retirar a exibição da notificação de adição de item ao carrinho de compras\r\n    const addCartSuccess = () => {\r\n      this.setState({\r\n        addSuccess: 'none'\r\n      });\r\n    }\r\n    setTimeout(addCartSuccess, 3000); // ocultar a notificação em 7 segundos\r\n\r\n    // responsável pelo preço total de todos os items ao carrinho de compras\r\n    const totalCart = (price, amount) => {\r\n      total += price;\r\n      return total.toFixed(2);  // fixe somente duas casas decimais depois da vírgula\r\n    }\r\n\r\n    // responsável pelo preço subtotal de cada produto individualmente\r\n    const subTotal = (price, amount) => {\r\n      return (price / amount).toFixed(2); // fixe somente duas casas decimais depois da vírgula\r\n    }\r\n\r\n    // responsável pela exibição (show) do carrinho de compras\r\n    const ShowCart = () => {\r\n      // renderiza (exiba) o HTML do carrinho de compras\r\n      return (cart.length > 0) ? cart.map((book, index) => {return <>\r\n        <div className=\"header-list-cart\">\r\n          <div style={{textAlign: 'center'}} className=\"cart-item\">Produto</div>\r\n          <div className=\"cart-item\">Nome</div>\r\n          <div className=\"cart-item\">Preço</div>\r\n          <div className=\"cart-item\">Qtd.Parcelas</div>\r\n          <div class=\"cart-item\">Subtotal</div>\r\n        </div>\r\n        <div className=\"items-list-cart\">\r\n          <div className=\"cart-item\"><img src={book[0].img} width={100} height={150} /></div>\r\n          <div className=\"cart-item\">{book[0].title}</div>\r\n          <div className=\"cart-item\">R$ {book[0].price}</div>\r\n          <div className=\"cart-item\">\r\n            <button onClick={() => decrement(book[0].id)} className=\"btn-amount-cart\"><FcMinus /></button> \r\n            &nbsp;{amount[book[0].id]}&nbsp; \r\n            <button onClick={() => increment(book[0].id)}  className=\"btn-amount-cart\"><FcPlus /></button>\r\n          </div>\r\n          <div className=\"cart-item\">R$ {subTotal(book[0].price, amount[book[0].id])}</div>\r\n        </div>\r\n        <div className=\"footer-list-cart\">Total R$ {totalCart(book[0].price, amount[book[0].id])}</div>\r\n        </>\r\n      }) : <h4 style={{marginTop: '25%', textAlign: 'center', fontSize: '20pt'}}>Não há produtos no carrinho!</h4>\r\n    }\r\n\r\n    // agora, renderiza (exiba) o HTML\r\n    return (\r\n      <>\r\n      {(cart.length > 0) ? <h6 className=\"notification\" style={{display: this.state.addSuccess}}>{id.split('-').join(' ')}</h6> : ''}\r\n      <div class=\"container-cart\">\r\n          <header className=\"home-header\">\r\n              <span><Link className=\"link-home\" to=\"/\"><FaHome /></Link></span>\r\n          </header>\r\n          <div className=\"list-cart\">\r\n            {ShowCart()}\r\n          </div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// declare método padrão (mapStateToProps) do React para recuperar os valores da Store que vem de combineReducers do script main.js\r\nconst mapStateToProps = store => ({\r\n  cart: store.clickCart.cart, // obtém de combineReducers de main.js\r\n  amount: store.clickAmount.amount, // obtém de compineReducers de main.js\r\n});\r\n\r\n// declare método padrão (mapDispatchToProps) para realizar dispatch (ações) para increment, decrement e add com bindActionCreators\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ increment, decrement, add }, dispatch); // vincula (bind) ações (actions) com bindActionCreators\r\n\r\n// exporta connect vinculando métodos padrão acima ao componente Cart para que o combineReducers funcione em main.js\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\cart\\show-cart.js",["60","61","62","63"],"import { FaHome } from 'react-icons/fa';\r\nimport { FcPlus } from 'react-icons/fc';\r\nimport { FcMinus } from 'react-icons/fc';\r\nimport './index.css'; // importa css de App.css\r\nimport React, {Component} from 'react'; // importe de React\r\nimport {bindActionCreators} from 'redux'; // importar de redux\r\nimport { useSelector, useDispatch, connect } from 'react-redux'; // importar de react-redux\r\nimport { increment, decrement, add } from '../../store/actions'; // importar de store/actions\r\n\r\nimport {  // importa Link de react-router-dom para gerar os links de JSX\r\n  Link\r\n} from \"react-router-dom\";\r\nimport showCart from './show-cart';\r\n\r\n// declare ShowCart como componente de classe que herda (estende) de Component \r\nclass ShowCart extends Component {\r\n  state = {\r\n    addSuccess: 'block'\r\n  }\r\n\r\n  render() {\r\n    let total = 0;\r\n    const {\r\n      cart, // text para a interpolação dos valores da lista (objeto literal)\r\n      amount, // amount para representar a quantia de cada livro no carrinho individualmente\r\n      increment,  // representa o incremento (soma) da quantia de livros\r\n      decrement,  // representa o decremento (subtração) da quantia de livros\r\n    } = this.props; // obtém de this.props os objetos (id, add, cart, amount, increment, decrement)\r\n\r\n    // responsável em retirar a exibição da notificação de adição de item ao carrinho de compras\r\n    const addCartSuccess = () => {\r\n      this.setState({\r\n        addSuccess: 'none'\r\n      });\r\n    }\r\n    setTimeout(addCartSuccess, 3000); // ocultar a notificação em 3 segundos\r\n\r\n    // responsável pelo preço total de todos os items ao carrinho de compras\r\n    const totalCart = (price, amount) => {\r\n      total += price;\r\n      return total.toFixed(2);  // fixe somente duas casas decimais depois da vírgula\r\n    }\r\n\r\n    // responsável pelo preço subtotal de cada produto individualmente\r\n    const subTotal = (price, amount) => {\r\n      return (price / amount).toFixed(2); // fixe somente duas casas decimais depois da vírgula\r\n    }\r\n\r\n    // responsável pela exibição (show) do carrinho de compras\r\n    const ShowCart = () => {\r\n      // renderiza (exiba) o HTML do carrinho de compras\r\n      return (cart.length > 0) ? cart.map((book, index) => {return <>\r\n        <div className=\"header-list-cart\">\r\n          <div style={{textAlign: 'center'}} className=\"cart-item\">Produto</div>\r\n          <div className=\"cart-item\">Nome</div>\r\n          <div className=\"cart-item\">Preço</div>\r\n          <div className=\"cart-item\">Qtd.Parcelas</div>\r\n          <div class=\"cart-item\">Subtotal</div>\r\n        </div>\r\n        <div className=\"items-list-cart\">\r\n          <div className=\"cart-item\"><img src={book[0].img} width={100} height={150} /></div>\r\n          <div className=\"cart-item\">{book[0].title}</div>\r\n          <div className=\"cart-item\">R$ {book[0].price}</div>\r\n          <div className=\"cart-item\">\r\n            <button onClick={() => decrement(book[0].id)} className=\"btn-amount-cart\"><FcMinus /></button> \r\n            &nbsp;{amount[book[0].id]}&nbsp; \r\n            <button onClick={() => increment(book[0].id)}  className=\"btn-amount-cart\"><FcPlus /></button>\r\n          </div>\r\n          <div className=\"cart-item\">{subTotal(book[0].price, amount[book[0].id])}</div>\r\n        </div>\r\n        <div className=\"footer-list-cart\">Total R$ {totalCart(book[0].price, amount[book[0].id])}</div>\r\n        </>\r\n      }) : <h4 style={{marginTop: '25%', textAlign: 'center', fontSize: '20pt'}}>Não há produtos no carrinho!</h4>\r\n    }\r\n\r\n    // agora, renderiza (exiba) o HTML\r\n    return (\r\n      <>\r\n      <div class=\"container-cart\">\r\n          <header className=\"home-header\">\r\n              <span><Link className=\"link-home\" to=\"/\"><FaHome /></Link></span>\r\n          </header>\r\n          <div className=\"list-cart\">\r\n            {ShowCart()}\r\n          </div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// declare método padrão (mapStateToProps) do React para recuperar os valores da Store que vem de combineReducers do script main.js\r\nconst mapStateToProps = store => ({\r\n  cart: store.clickCart.cart, // obtém de combineReducers de main.js\r\n  amount: store.clickAmount.amount, // obtém de compineReducers de main.js\r\n});\r\n\r\n// declare método padrão (mapDispatchToProps) para realizar dispatch (ações) para increment, decrement e add com bindActionCreators\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ increment, decrement, add }, dispatch); // vincula (bind) ações (actions) com bindActionCreators\r\n\r\n// exporta connect vinculando métodos padrão acima ao componente ShowCart para que o combineReducers funcione em main.js\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowCart);","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\pages\\home\\index.js",["64","65","66","67","68"],"import { FaCartPlus} from 'react-icons/fa';\nimport './index.css'; // importa css de App.css\nimport React, {Component} from 'react'; // importar de react\nimport {bindActionCreators} from 'redux'; // importar de redux\nimport { useSelector, useDispatch, connect } from 'react-redux'; // importar de react-redux\nimport { add } from '../../store/actions'; // importar de store/actions\n\nimport {  // importa Link de react-router-dom para gerar os links de JSX\n  Link, Redirect\n} from \"react-router-dom\";\n\n// declare Home como componente de classe que herda (estende) de Component \nclass Home extends Component {\n  // hook state responsável pelo redirecionamento ao carrinho de compras após de adicionar um item\n  state = {\n    redirect: null  // define como indefinido (nulo)\n  }\n\n  // renderiza (exiba) o HTML\n  render() {\n    const books = []; // declare array books que conterá a lista (objeto literal) JSON JavaScript\n    /** ### booksjson representa aqui como se fosse um BACK-END. Caso queira ter um sistema de banco de dados junto ao back-end,\n    *** ### tendo os dados de cada livro, você terá que desconsiderar esse objeto JSON abaixo.\n      */\n    const booksjson = [\n      {id: 1, title: 'Bolsa Louis Vuitton', price: 2500.99, img: 'https://cdn.upcatalogo.com.br/img/sites/540/2021/02/1-10.jpg'},\n      {id: 2, title: 'Camisa Supreme-Louis Vuitton', price: 549.99, img: 'https://cdn.awsli.com.br/800x800/1081/1081393/produto/40933337/blusa-moletom-capuz-supreme-hype-swag-branco-peep-trap-rap-f75ccd99.jpg'},\n      {id: 3, title: 'Pulma Edição Limitada', price: 365.85, img: 'https://t-static.dafiti.com.br/Lz-z1xUY_UReE9_SKLSHejKjHcY=/fit-in/427x620/static.dafiti.com.br/p/puma-t%25c3%25aanis-puma-anzarun-lite-bold-cinza-7334-1387147-1-product.jpg'}\n    ];\n    const {\n      add,  // add para adicionar lista (objeto literal) que representa um JSON\n      cart, // text para a interpolação dos valores da lista (objeto literal)\n      amount, // amount responsável pela quantia de cada livro individualmente\n    } = this.props; // obtém de this.props os objetos (add, cart e amount)\n\n    // declare uma função addBook para adicionar lista (objeto literal)\n    const addBook = book => {\n      add(book); // adicione à lista\n      // define (set) o hook state como botão clicado para redirecionar ao carrinho de compras\n      this.setState({\n        redirect: 'clicked' // clicked diz que o botão de adicionar livro com clicado\n      });\n    }\n\n    // se botão addBook clicado, então redirecionar ao carrinho de compras\n    if(this.state.redirect !== null)\n      // livro-adicionado-com-sucesso responsável pela exibição da notificação no carrinho de compras\n      return <Redirect to=\"/cart/O-produto-foi-adicionado-com-sucesso!\" />\n\n    // agora, renderiza (exiba) o HTML\n    return (\n      <>\n      <div className=\"container-home\">\n        <header className=\"home-header\">\n          <h1>Produtos</h1>\n          <span><Link className=\"link-cart\" to=\"/show-cart\"><FaCartPlus /></Link></span>\n        </header>\n        <main>\n          <div className=\"list-books\">\n            {booksjson.map((book, index) => <>\n              <div class=\"list-row\">\n                <p><img src={book.img} width={150} height={200} /></p><br/>\n                <p>{book.title}</p>\n                <p>R$ {book.price}</p><br/>\n                <p>\n                  <button className=\"list-button\" onClick={() => addBook(book.id)}>\n                    <span style={{padding: '9px', background: 'rgba(69, 14, 121, 0)'}}>{(amount[book.id] > 0) ? amount[book.id] : 0}</span><span>Adicionar ao carrinho</span>\n                  </button>\n                </p>\n              </div>\n            </>)}\n          </div>\n        </main>\n      </div>\n      </>\n    );\n  }\n}\n\n// declare método padrão (mapStateToProps) do React para recuperar os valores da Store que vem de combineReducers do script main.js\nconst mapStateToProps = store => ({\n  cart: store.clickCart.cart, // obtém de combineReducers de main.js\n  amount: store.clickAmount.amount,\n});\n\n// declare método padrão (mapDispatchToProps) para realizar dispatch (ações) para add com bindActionCreators\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ add }, dispatch); // vincula (bind) ações (actions) com bindActionCreators\n\n// exporta connect vinculando métodos padrão acima ao componente Home para que o combineReducers funcione em main.js\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\sagas.js",["69"],"import {all, put, select, takeLatest} from 'redux-saga/effects'  // importe de redux-saga/effects\r\nimport { addSuccess, cartAmountUpdateSuccess } from '../store/actions'; // importar de store/actions\r\n\r\n/* ### métodos para redux saga que funcionam por trás dos panos na aplicação aos quais você queira ###\r\n** ### que funcione junto aos componentes como Home, Cart e ShowCart ###\r\n**/\r\n\r\n// representa o BACK-END. Caso queira para a produção, desconsidere esse objeto booksjson caso queira um banco de dados real\r\nconst booksjson = [\r\n    {id: 1, title: 'Bolsa Louis Vuitton', price: 2500.99, img: 'https://cdn.upcatalogo.com.br/img/sites/540/2021/02/1-10.jpg'},\r\n    {id: 2, title: 'Camisa Supreme-LouisVuitton', price: 549.99, img: 'https://cdn.awsli.com.br/800x800/1081/1081393/produto/40933337/blusa-moletom-capuz-supreme-hype-swag-branco-peep-trap-rap-f75ccd99.jpg'},\r\n    {id: 3, title: 'Pulma Edição Limitada', price: 365.85, img: 'https://t-static.dafiti.com.br/Lz-z1xUY_UReE9_SKLSHejKjHcY=/fit-in/427x620/static.dafiti.com.br/p/puma-t%25c3%25aanis-puma-anzarun-lite-bold-cinza-7334-1387147-1-product.jpg'}\r\n];\r\n\r\n// function saga responsável por executar em segundo plano\r\nfunction* addToCart({id}) {\r\n    // obtém um book através do ID\r\n    const book = booksjson.map(book => (book.id === id) ? book : null);\r\n\r\n    // faz dispatch através de put de redux-saga/effects, responsável pelos efeitos colaterais em redux no react.js\r\n    yield put(addSuccess([book[id - 1]]));\r\n    yield put(cartAmountUpdateSuccess(id));\r\n}\r\n\r\n/* ### exporta como padrão com all (que junta todos os sagas de redux) com takeLatest para cada ação de add (adicionar) \r\n** ### quando houver cliques no botão em Home, ou seja, takeLatest ouve os eventos de adiçao de livros e nos cliques no botão\r\n   ### em scripts Home. Você poderá adiconar mais eventos se quiser além desse que está embaixo.\r\n**/\r\nexport default all([\r\n    takeLatest('add', addToCart),\r\n]);","C:\\Users\\Skip\\Desktop\\cart-react-app\\src\\store\\actions.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":19,"column":3,"nodeType":"76","messageId":"77","endLine":24,"endColumn":4},{"ruleId":"74","severity":1,"message":"75","line":29,"column":3,"nodeType":"76","messageId":"77","endLine":45,"endColumn":4},{"ruleId":"78","severity":1,"message":"79","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":7,"column":23,"nodeType":"80","messageId":"81","endLine":7,"endColumn":34},{"ruleId":"78","severity":1,"message":"83","line":13,"column":8,"nodeType":"80","messageId":"81","endLine":13,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":62,"column":38,"nodeType":"86","endLine":62,"endColumn":88},{"ruleId":"78","severity":1,"message":"79","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":7,"column":23,"nodeType":"80","messageId":"81","endLine":7,"endColumn":34},{"ruleId":"78","severity":1,"message":"83","line":13,"column":8,"nodeType":"80","messageId":"81","endLine":13,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":61,"column":38,"nodeType":"86","endLine":61,"endColumn":88},{"ruleId":"78","severity":1,"message":"79","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":5,"column":23,"nodeType":"80","messageId":"81","endLine":5,"endColumn":34},{"ruleId":"78","severity":1,"message":"87","line":21,"column":11,"nodeType":"80","messageId":"81","endLine":21,"endColumn":16},{"ruleId":"78","severity":1,"message":"88","line":32,"column":7,"nodeType":"80","messageId":"81","endLine":32,"endColumn":11},{"ruleId":"84","severity":1,"message":"85","line":62,"column":20,"nodeType":"86","endLine":62,"endColumn":67},{"ruleId":"78","severity":1,"message":"89","line":1,"column":19,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'showCart' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'books' is assigned a value but never used.","'cart' is assigned a value but never used.","'select' is defined but never used.","no-global-assign","no-unsafe-negation"]