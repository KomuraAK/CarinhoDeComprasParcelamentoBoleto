{"ast":null,"code":"import produce from 'immer'; // produce immer é um tipo de produtor de valores que mantém estado (state) junto ao redux\n\n/*\r\n** funções reducer e reducerAmountCart responsável pelo comportamento das ações dispatch em react-redux\r\n** conforme o tipo (type ou action.type) lançado durante o uso da aplicação react.js.\r\n** o state para o estado da loja (store) e action das ações (dispatch) da aplicação\r\n**/\n\nconst INITIAL_AMOUNT = {\n  amount: []\n};\nconst INITIAL_CART = {\n  cart: []\n}; // responsável por adicionar livro ao carrinho através dos dispatchs\n\nconst reducer = produce((draft, action) => {\n  switch (action.type) {\n    case '@cart/addSuccess':\n      const {\n        product\n      } = action;\n      draft.cart[product[0].id] = product;\n      return draft;\n  }\n}, INITIAL_CART); // responsável por atualizar a quantia de cada livro individualmente\n\nconst reducerAmountCart = produce((draft, action) => {\n  switch (action.type) {\n    // case responsável por adicionar quantia de livros ao adicionar ao carrinho\n    case '@cart/amountSuccess':\n      if (typeof draft.amount[action.id] === 'undefined') draft.amount[action.id] = 1;else draft.amount[action.id]++;\n      break;\n    // case responsável por atualizar a quantia de livros somando (incremented)\n\n    case '@cart/incremented':\n      draft.amount[action.id]++;\n      break;\n    // case responsável por atualizar a quantia de livros subtraindo (decremented)\n\n    case '@cart/decremented':\n      if (draft.amount[action.id] > 0) draft.amount[action.id]--;\n  }\n}, INITIAL_AMOUNT); // exporta os reducers individualmente\n\nexport { reducer, reducerAmountCart };","map":{"version":3,"sources":["C:/Users/Skip/Desktop/cart-react-app/src/store/reducer.js"],"names":["produce","INITIAL_AMOUNT","amount","INITIAL_CART","cart","reducer","draft","action","type","product","id","reducerAmountCart"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB,C,CAA6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE;AADa,CAAvB;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB,C,CAIA;;AACA,MAAMC,OAAO,GAAGL,OAAO,CAAC,CAACM,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,YAAM;AAACC,QAAAA;AAAD,UAAYF,MAAlB;AACAD,MAAAA,KAAK,CAACF,IAAN,CAAWK,OAAO,CAAC,CAAD,CAAP,CAAWC,EAAtB,IAA4BD,OAA5B;AACA,aAAOH,KAAP;AAJJ;AAMD,CAPsB,EAOpBH,YAPoB,CAAvB,C,CASA;;AACA,MAAMQ,iBAAiB,GAAGX,OAAO,CAAC,CAACM,KAAD,EAAQC,MAAR,KAAmB;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAK,qBAAL;AACE,UAAG,OAAOF,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB,CAAP,KAAmC,WAAtC,EACEJ,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB,IAA0B,CAA1B,CADF,KAGEJ,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB;AACF;AACF;;AACA,SAAK,mBAAL;AACIJ,MAAAA,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB;AACF;AACF;;AACA,SAAK,mBAAL;AACE,UAAGJ,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB,IAA0B,CAA7B,EACEJ,KAAK,CAACJ,MAAN,CAAaK,MAAM,CAACG,EAApB;AAfN;AAiBD,CAlBgC,EAkB9BT,cAlB8B,CAAjC,C,CAoBA;;AACA,SAAQI,OAAR,EAAiBM,iBAAjB","sourcesContent":["import produce from 'immer'; // produce immer é um tipo de produtor de valores que mantém estado (state) junto ao redux\r\n\r\n/*\r\n** funções reducer e reducerAmountCart responsável pelo comportamento das ações dispatch em react-redux\r\n** conforme o tipo (type ou action.type) lançado durante o uso da aplicação react.js.\r\n** o state para o estado da loja (store) e action das ações (dispatch) da aplicação\r\n**/\r\n\r\nconst INITIAL_AMOUNT = {\r\n  amount: [],\r\n}\r\n\r\nconst INITIAL_CART = {\r\n  cart: []\r\n}\r\n\r\n// responsável por adicionar livro ao carrinho através dos dispatchs\r\nconst reducer = produce((draft, action) => {\r\n  switch (action.type) {\r\n    case '@cart/addSuccess':\r\n      const {product} = action;\r\n      draft.cart[product[0].id] = product;\r\n      return draft;\r\n  }\r\n}, INITIAL_CART)\r\n\r\n// responsável por atualizar a quantia de cada livro individualmente\r\nconst reducerAmountCart = produce((draft, action) => {\r\n  switch (action.type) {\r\n    // case responsável por adicionar quantia de livros ao adicionar ao carrinho\r\n    case '@cart/amountSuccess':\r\n      if(typeof draft.amount[action.id] === 'undefined')\r\n        draft.amount[action.id] = 1;\r\n      else\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de livros somando (incremented)\r\n    case '@cart/incremented':\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de livros subtraindo (decremented)\r\n    case '@cart/decremented':\r\n      if(draft.amount[action.id] > 0)\r\n        draft.amount[action.id]--;\r\n  }\r\n}, INITIAL_AMOUNT)\r\n\r\n// exporta os reducers individualmente\r\nexport {reducer, reducerAmountCart};"]},"metadata":{},"sourceType":"module"}